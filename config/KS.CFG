vmaccepteula
install --firstdisk=usb --novmfsondisk
reboot

network --bootproto=static --ip=172.30.0.10 --netmask=255.255.255.0 --gateway=172.30.0.1 --hostname=mgmt-esx01.vcf.lab --nameserver=172.30.0.2 --addvmportgroup=1
rootpw VMware1!

%firstboot --interpreter=busybox

ESXI_NVME_TIERING_AND_OSDATA_AND_VMFS="t10.NVMe____Samsung_SSD_990_EVO_2TB_________________C604A0412C382500"
NVME_TIERING_SIZE_IN_GB=320
OSDATA_SIZE_IN_GB=64
VMFS_DATASTORE_NAME="local-vmfs-datastore"
NTP_SERVER=104.167.215.195

# Ensure hostd is ready
while ! vim-cmd hostsvc/runtimeinfo; do
sleep 10
done

# enable & start SSH
vim-cmd hostsvc/enable_ssh
vim-cmd hostsvc/start_ssh

# enable & start ESXi Shell
vim-cmd hostsvc/enable_esx_shell
vim-cmd hostsvc/start_esx_shell

# Suppress ESXi Shell warning
esxcli system settings advanced set -o /UserVars/SuppressShellWarning -i 1

esxcli system ntp set -e true -s $NTP_SERVER

# Assumes NVMe Tiering will be used, unless you have enough physical resources
esxcli system settings kernel set -s MemoryTiering -v TRUE
esxcli system settings advanced set -o /Mem/TierNvmePct -i 400

NVME_TIERING_GUID="B3676DDDA38A4CD6B970718D7F873811"
OSDATA_GUID="4EB2EA3978554790A79EFAE495E21F8D"
VMFS_GUID="AA31E02A400F11DB9590000C2911D1B8"

# Sector size in bytes
sector_size=512

# Start & End Sector for NVMe Tiering partition
nvme_start_sector=2048
nvme_end_sector=$(( (NVME_TIERING_SIZE_IN_GB * 1024 * 1024 * 1024 / sector_size ) - 1 ))

# Start & End Sector for ESXi OSData partition
osdata_partition_size_bytes=$(( (OSDATA_SIZE_IN_GB * 1024 * 1024 * 1024 / sector_size ) - 1 ))
osdata_start_sector=$(( nvme_end_sector + 1 ))
osdata_end_sector=$(( nvme_end_sector + osdata_partition_size_bytes ))

# Start & End Sector for VMFS partition
vmfs_start_sector=$(( osdata_end_sector + 1 ))
total_disk_capacity_bytes=$(partedUtil getUsableSectors /vmfs/devices/disks/${ESXI_NVME_TIERING_AND_OSDATA_AND_VMFS} | awk '{print $2}')

# Construct partedUtil command
partedUtilCommand="partedUtil setptbl /vmfs/devices/disks/${ESXI_NVME_TIERING_AND_OSDATA_AND_VMFS} gpt"

partition1="1 ${nvme_start_sector} ${nvme_end_sector} ${NVME_TIERING_GUID} 0"
partition2="2 ${osdata_start_sector} ${osdata_end_sector} ${OSDATA_GUID} 0"
partition3="3 ${vmfs_start_sector} ${total_disk_capacity_bytes} ${VMFS_GUID} 0"

${partedUtilCommand} "${partition1}" "${partition2}" "${partition3}"

generated_uuid=$(python -c "import uuid; print(str(uuid.uuid4()))")
osdata_volume_name="OSDATA-${generated_uuid}"

vmkfstools -C vmfs6l --isSystem 1 /vmfs/devices/disks/${ESXI_NVME_TIERING_AND_OSDATA_AND_VMFS}:2 -S ${osdata_volume_name}

system_generated_uuid=$(esxcli storage filesystem list | grep "${osdata_volume_name}" | awk '{print $3}')
new_osdata_volume_name="OSDATA-${system_generated_uuid}"

ln -sf /vmfs/volumes/${system_generated_uuid} /vmfs/volumes/${new_osdata_volume_name}
vmkfstools -C vmfs6 /vmfs/devices/disks/${ESXI_NVME_TIERING_AND_OSDATA_AND_VMFS}:3 -S ${VMFS_DATASTORE_NAME}
vim-cmd hostsvc/advopt/update OSData.configuredLocation string /vmfs/volumes/${system_generated_uuid}

LOCKER_PATH=$(esxcli storage filesystem list | grep LOCKER | awk '{print$1}')
cp -rf ${LOCKER_PATH}/packages /vmfs/volumes/${system_generated_uuid}/
cp -rf ${LOCKER_PATH}/vmware /vmfs/volumes/${system_generated_uuid}/

/bin/generate-certificates

reboot
